// ====== Class declarations ====== //
class POLYNOMIAL {
	public func evaluate(float x) : float;
};

class LINEAR inherits POLYNOMIAL {
	private float a;
	private float b;
	
	public func build(float A, float B) : LINEAR;
	public func evaluate(float x) : float;
};

class QUADRATIC inherits POLYNOMIAL {
	private float a;
	private float b;
	private float c;
	
	public func build(float A, float B, float C) : QUADRATIC;
	public func evaluate(float x) : float;
};

// ====== Function Definitions ====== //
func POLYNOMIAL::evaluate(float x) : float
{
  return (0);
}

func LINEAR::evaluate(float x) : float 
{
  var
  {
    float result;
  }
  result = 0.0;
  result = a * x + b;
  return (result);
}
  
func QUADRATIC::evaluate(float x) : float
{
  var    
  {
    float result;
  }
  //Using Horner's method
  result = a;
  result = result * x + b;
  result = result * x + c;
  return (result);
}
  
func LINEAR::build(float A, float B) : LINEAR 
{
  var 
  {
    LINEAR new_function;
  }
  new_function.a = A;
  new_function.b = B;
  return (new_function);
}
  
func QUADRATIC::build(float A, float B, float C) : QUADRATIC
{
  var
  {
    QUADRATIC new_function;
  }
  new_function.a = A;
  new_function.b = B;
  new_function.c = C;
  return (new_function);
}
  

// ====== main ====== //
main
{
  var
  {
    linear f1;
    quadratic f2;
    integer counter;
  }
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  counter = 1;
	
  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter));
  };
}
/*
    classes
    --------------------------------------
| | no class declaration
| | class declaration
|X| multiple class declarations
|X| no data member declaration
|X| data member declaration
|X| multiple data member declaration
| | no member function declaration
|X| member function declaration
|X| multiple member function declaration
| | no member
|X| no inherited class
|X| one inherited class
| | multiple inherited classes
|X| private member specifier
|X| public member specifier
| | absence of member specifier

    functions: definitions
    --------------------------------------
| | no main function definition (not allowed)
|X| main function definition
| | multiple main function definitions (not allowed)
|X| no free function definition
| | free function definition
| | multiple free function definitions
| | no member function definition
|X| member function definition
|X| multiple member function definitions
| | return type: void
| | return type: integer
|X| return type: float
| | return type: string
|X| return type: id
| | return type: array (not allowed)


    functions: formal parameters
    --------------------------------------
| | type: integer
|X| type: float
| | type: string
| | type: id
| | type: 1-dim array 
| | type: n-dim array
| | type: array (with size)
| | type: array (without size)

    functions: calls
    --------------------------------------
| | free function call
|X| member function call
| | parameters:0
|X| parameters:1
|X| parameters:n
| | array parameter - 1-dim
| | array parameter - n-dim
| | array parameter - with size
| | array parameter - without size
| | function call as statement
|X| function call as expression factor
| | expression as parameter

    variable declaration
    --------------------------------------
| | type: integer
| | type: float
| | type: string
|X| type: id
| | type: 1-dim array 
| | type: n-dim array
| | type: array (with size)
| | type: array (without size)

    function body: local variable declaration block
    --------------------------------------
| | no local variable declarations block
|X| local variable declaration block
| | multiple local variable declarations block (not allowed)
| | no variables in block
|X| 1 variable declared in block
|X| multiple variables declared in block

    function body: statements
    --------------------------------------
| | no statement
| | 1 statement
|X| n statements
| | if statement
| | if: empty then or else blocks
| | if: 1-statement then or else blocks
| | if: n-statements then or else blocks
|X| while statement
| | while: empty block
| | while: 1-statement block
|X| while: n-statement block
| | read(<variable>) statement
|X| write(<expr>) statement
|X| return(<expr>) statement
| | break statement
| | continue statement
|X| assignment statement

    variable + idnest
    --------------------------------------
|X| id
|X| id.id
|X| id.id(id)
| | id(id).id
| | id(id).id()
| | id.id[id]
| | id[id].id
| | id[id].id[id]
| | id.id[id][id]
| | id[id][id].id
| | id[id][id].id[id][id]
| | id(id).id[id]
| | id(id).id[id][id]
| | expression as array index

    expressions
    --------------------------------------
| | single variable
| | involving addop
| | involving multop
| | involving relop
|X| involving addop + multop
| | involving multop + relop
| | involving addop + multop + relop
| | involving parentheses
| | involving nested parenhteses
| | involving ternary operator
| | involving not
| | involving sign
| | involving literals
|X| involving variable + idnest
|X| involving function calls
| | involving all the above in one expression
*/
// ====== main ====== //
main
{
  var
  {
    integer i1;
    float f1;
    string s1;
    QUADRATIC q1;
    integer array1d_nosize[];
    float array2d_nosize[][];
    float array2d_withsize[5][7];
    string array5d_nosize[][][][][];
  }

  r1 = f1;
  r2 = f1.f2;
  r3 = f1.f2(f3);
  r4 = f1(f2).f3;
  r5 = f1(f2).f3();
  r6 = f1.f2[f3];
  r7 = f1[f2].f3;
  r8 = f1[f2].f3[f4];
  r9 = f1.f2[f3][f4];
  r10 = f1[f2][f3].f4;
  r11 = f1[f2][f3].f4[f5][f6];
  r12 = f1(f2).f3[f4];
  r13 = f1(f2).f3[f4][f5];

}
/*
    classes
    --------------------------------------
|X| no class declaration
| | class declaration
| | multiple class declarations
| | no data member declaration
| | data member declaration
| | multiple data member declaration
| | no member function declaration
| | member function declaration
| | multiple member function declaration
| | no member
| | no inherited class
| | one inherited class
| | multiple inherited classes
| | private member specifier
| | public member specifier
| | absence of member specifier

    functions: definitions
    --------------------------------------
| | no main function definition (not allowed)
| | main function definition
| | multiple main function definitions (not allowed)
| | no free function definition
| | free function definition
| | multiple free function definitions
| | no member function definition
| | member function definition
| | multiple member function definitions
| | return type: void
| | return type: integer
| | return type: float
| | return type: string
| | return type: id
| | return type: array (not allowed)


    functions: formal parameters
    --------------------------------------
| | type: integer
| | type: float
| | type: string
| | type: id
| | type: 1-dim array 
| | type: n-dim array
| | type: array (with size)
| | type: array (without size)

    functions: calls
    --------------------------------------
| | free function call
| | member function call
| | parameters:0
| | parameters:1
| | parameters:n
| | array parameter - 1-dim
| | array parameter - n-dim
| | array parameter - with size
| | array parameter - without size
| | function call as statement
| | function call as expression factor
| | expression as parameter

    variable declaration
    --------------------------------------
|X| type: integer
|X| type: float
|X| type: string
|X| type: id
|X| type: 1-dim array 
|X| type: n-dim array
|X| type: array (with size)
|X| type: array (without size)

    function body: local variable declaration block
    --------------------------------------
| | no local variable declarations block
| | local variable declaration block
| | multiple local variable declarations block (not allowed)
| | no variables in block
| | 1 variable declared in block
| | multiple variables declared in block

    function body: statements
    --------------------------------------
| | no statement
| | 1 statement
| | n statements
| | if statement
| | if: empty then or else blocks
| | if: 1-statement then or else blocks
| | if: n-statements then or else blocks
| | while statement
| | while: empty block
| | while: 1-statement block
| | while: n-statement block
| | read(<variable>) statement
| | write(<expr>) statement
| | return(<expr>) statement
| | break statement
| | continue statement
| | assignment statement

    variable + idnest
    --------------------------------------
|X| id
|X| id.id
|X| id.id(id)
|X| id(id).id
|X| id(id).id()
|X| id.id[id]
|X| id[id].id
|X| id[id].id[id]
|X| id.id[id][id]
|X| id[id][id].id
|X| id[id][id].id[id][id]
|X| id(id).id[id]
|X| id(id).id[id][id]
|X| expression as array index

    expressions
    --------------------------------------
|X| single variable
| | involving addop
| | involving multop
| | involving relop
| | involving addop + multop
| | involving multop + relop
| | involving addop + multop + relop
| | involving parentheses
| | involving nested parenhteses
| | involving ternary operator
| | involving not
| | involving sign
| | involving literals
| | involving variable + idnest
| | involving function calls
| | involving all the above in one expression
*/
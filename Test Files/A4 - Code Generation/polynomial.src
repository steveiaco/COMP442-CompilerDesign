// Assignment 4 coverage:
//      -------------
//      | YES | NO  |
//      ------------- 
// 1.1: |  X  |     |
// 1.2: |  X  |     |
// 1.3: |  X  |     |
// 1.4: |     |  X  |
// 2.1: |  X  |     |
// 2.2: |  X  |     |
// 2.3: |  X  |     |
// 2.4: |  X  |     |
// 3.1: |  X  |     |
// 3.2: |  X  |     |
// 3.3: |  X  |     |
// 3.4: |  X  |     |
// 4.1: |     |  X  |
// 4.2: |     |  X  |
// 4.3: |  X  |     |
// 4.4: |  X  |     |
// 5.1: |  X  |     |
// 5.2: |     |  X  |
// 5.3: |  X  |     |
//      -------------

// ====== Class declarations ====== //
class POLYNOMIAL 
{
	public func evaluate(float x) : float;
};

class LINEAR inherits POLYNOMIAL 
{
	private float a;
	private float b;
	
	public func build(float A, float B) : LINEAR;
	public func evaluate(float x) : float;
};

class QUADRATIC inherits POLYNOMIAL 
{
	private float a;
	private float b;
	private float c;
	
	public func build(float A, float B, float C) : QUADRATIC;
	public func evaluate(float x) : float;
};

// ====== Function Definitions ====== //
func POLYNOMIAL::evaluate(float x) : float                        // 2.1, 2.2
{
    return (0);                                                   // 2.3
}

func LINEAR::evaluate(float x) : float                            // 2.1, 2.2
{
  var
  {
    float result;                                                 // 1.1
  }
    result = 0.0;                                                 // 3.1
    result = a * x + b;                                           // 3.1, 5.1
    return (result);                                              // 2.3
}
  
func QUADRATIC::evaluate(float x) : float                         // 2.1, 2.2
{
  var
  {
    float result;                                                 // 1.1
  }    
    //Using Horner's method
    result = a;                                                   // 3.1
    result = result * x + b;                                      // 3.1, 5.1
    result = result * x + c;                                      // 3.1, 5.1
    return (result);                                              // 2.3
}
  
func LINEAR::build(float A, float B) : LINEAR                     // 2.1, 2.2
{
  var
  {
    LINEAR new_function;                                          // 1.3
  }
    new_function.a = A;                                           // 3.1, 5.3
    new_function.b = B;                                           // 3.1, 5.3
    return (new_function);                                        // 2.3
}  
  
func QUADRATIC::build(float A, float B, float C) : QUADRATIC      // 2.1, 2.2
{
  var
  {
    QUADRATIC new_function;                                       // 1.3
  }
    new_function.a = A;                                           // 3.1, 5.3
    new_function.b = B;                                           // 3.1, 5.3
    new_function.c = C;                                           // 3.1, 5.3
    return (new_function);                                        // 2.3
}
  

// ====== main ====== //
main
{
  var
  {
    LINEAR f1;                                                    // 1.3
    QUADRATIC f2;                                                 // 1.3
    integer counter;                                              // 1.1
  }
    f1 = f1.build(2, 3.5);                                        // 2.1, 2.2, 2.4
    f2 = f2.build(-2.0, 1.0, 0.0);                                // 2.1, 2.2, 2.4
    counter = 1;                                                  // 3.1	
    while(counter <= 10){                                         // 3.3, 5.1     
        write(counter);                                           // 3.4
        write(f1.evaluate(counter));                              // 3.4, 2.1, 2.2, 2.4
        write(f2.evaluate(counter));                              // 3.4, 2.1, 2.2, 2.4
    };
}